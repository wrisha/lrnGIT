first try on git

Lecture Scripts
If you want to follow along with me during the class, this will make it a little easier. I often go off-script and tweak demos based on attendee questions â€“ this is just my starting point:

Transact-SQL
/*
Fundamentals of Index Tuning: WHERE Clause

v1.2 - 2019-09-04

https://www.BrentOzar.com/go/indexfund


This demo requires:
* Any supported version of SQL Server
* Any Stack Overflow database: https://www.BrentOzar.com/go/querystack

This first RAISERROR is just to make sure you don't accidentally hit F5 and
run the entire script. You don't need to run this:
*/
RAISERROR(N'Oops! No, don''t just hit F5. Run these demos one at a time.', 20, 1) WITH LOG;
GO


/* I'm using the 50GB medium Stack database: */
USE StackOverflow2013;
GO
/* And this stored procedure drops all nonclustered indexes: */
DropIndexes;
GO
/* It leaves clustered indexes in place though. */


SET STATISTICS IO ON;

/* Visualizing index contents: */
CREATE INDEX IX_LastAccessDate_Id
  ON dbo.Users(LastAccessDate, Id);
GO
/* Becomes: */
SELECT TOP 1000 LastAccessDate, Id
  FROM dbo.Users
  ORDER BY LastAccessDate, Id;
GO


EXEC DropIndexes;
GO


CREATE INDEX IX_LastAccessDate_Id_DisplayName_Age
  ON dbo.Users(LastAccessDate, Id, DisplayName, Age);
GO
/* Becomes: */
SELECT LastAccessDate, Id, DisplayName, Age
  FROM dbo.Users
  ORDER BY LastAccessDate, Id, DisplayName, Age;
GO


EXEC DropIndexes;
GO



CREATE INDEX IX_LastAccessDate_Id_Includes
  ON dbo.Users(LastAccessDate, Id)
  INCLUDE (DisplayName, Age);
GO
/* Becomes: */
SELECT LastAccessDate, Id, DisplayName, Age
  FROM dbo.Users
  ORDER BY LastAccessDate, Id  /* DisplayName, Age;  These aren't sorted */
GO


EXEC DropIndexes;
GO


/* Now you try: write a SELECT query to visualize each of these: */

CREATE INDEX IX_Reputation_Location_Includes
  ON dbo.Users(Reputation, Location)
  INCLUDE (DisplayName);
GO


CREATE INDEX IX_CreationDate_Views
  ON dbo.Users(CreationDate, Views)
  INCLUDE (DownVotes, UpVotes);
GO


CREATE INDEX IX_Age_Reputation_Location
  ON dbo.Users(Age, Reputation, Location);
GO



EXEC DropIndexes;
GO



/* Design an index for this: */
SELECT Id, DisplayName, Location
  FROM dbo.Users
  WHERE DisplayName = 'alex';

CREATE INDEX IX_DisplayName_Includes
  ON dbo.Users(DisplayName)
  INCLUDE (Location);

SELECT DisplayName, Location, Id
  FROM dbo.Users
  ORDER BY DisplayName;

SELECT Id, DisplayName, Location
  FROM dbo.Users
  WHERE DisplayName = 'alex';


/* Design an index for this: */
SELECT Id, DisplayName, Location
  FROM dbo.Users
  WHERE DisplayName = 'alex'
    AND Location = 'Seattle, WA';

/* But we already have this.... */
CREATE INDEX IX_DisplayName_Includes
  ON dbo.Users(DisplayName)
  INCLUDE (Location);

/* Visualize the index: */
SELECT DisplayName, Location
  FROM dbo.Users
  ORDER BY DisplayName;

/* Visualize the index contents: */
SELECT DisplayName, Location
  FROM dbo.Users
  WHERE DisplayName = 'alex'
  ORDER BY DisplayName;

/* Create a couple of index options: */
CREATE INDEX IX_DisplayName_Location
  ON dbo.Users(DisplayName, Location);

CREATE INDEX IX_Location_DisplayName
  ON dbo.Users(Location, DisplayName);
GO

/* Test 'em with index hints: */
SET STATISTICS IO ON;
GO
SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = 1) /* Clustered index scan */
  WHERE DisplayName = N'alex'
    AND Location = N'Seattle, WA';

SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = IX_DisplayName_Includes)
  WHERE DisplayName = N'alex'
    AND Location = N'Seattle, WA';

SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = IX_DisplayName_Location)
  WHERE DisplayName = N'alex'
    AND Location = N'Seattle, WA';

SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = IX_Location_DisplayName)
  WHERE DisplayName = N'alex'
    AND Location = N'Seattle, WA';
GO

/* Which one does SQL Server pick? */
SELECT Id, DisplayName, Location
  FROM dbo.Users
  WHERE DisplayName = N'alex'
    AND Location = N'Seattle, WA';
GO



SET STATISTICS IO ON;
GO
SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = 1) /* Clustered index scan */
  WHERE DisplayName = N'alex'
    AND Location <> N'Seattle, WA';

SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = IX_DisplayName_Includes)
  WHERE DisplayName = N'alex'
    AND Location <> N'Seattle, WA';

SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = IX_DisplayName_Location)
  WHERE DisplayName = N'alex'
    AND Location <> N'Seattle, WA';

SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = IX_Location_DisplayName)
  WHERE DisplayName = N'alex'
    AND Location <> N'Seattle, WA';
GO

/* Showing the total pages in each index: */
SELECT COUNT(*)
  FROM dbo.Users WITH (INDEX = 1) /* Clustered index scan */

SELECT COUNT(*)
  FROM dbo.Users WITH (INDEX = IX_DisplayName_Includes)

SELECT COUNT(*)
  FROM dbo.Users WITH (INDEX = IX_DisplayName_Location)

SELECT COUNT(*)
  FROM dbo.Users WITH (INDEX = IX_Location_DisplayName)
GO

/* Which one does SQL Server pick? */
SELECT Id, DisplayName, Location
  FROM dbo.Users
  WHERE DisplayName = N'alex'
    AND Location <> N'Seattle, WA';
GO






/*
License: Creative Commons Attribution-ShareAlike 3.0 Unported (CC BY-SA 3.0)
More info: https://creativecommons.org/licenses/by-sa/3.0/

You are free to:
* Share - copy and redistribute the material in any medium or format
* Adapt - remix, transform, and build upon the material for any purpose, even 
  commercially

Under the following terms:
* Attribution - You must give appropriate credit, provide a link to the license,
  and indicate if changes were made.
* ShareAlike - If you remix, transform, or build upon the material, you must
  distribute your contributions under the same license as the original.
*/
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
/*
Fundamentals of Index Tuning: WHERE Clause
 
v1.2 - 2019-09-04
 
https://www.BrentOzar.com/go/indexfund
 
 
This demo requires:
* Any supported version of SQL Server
* Any Stack Overflow database: https://www.BrentOzar.com/go/querystack
 
This first RAISERROR is just to make sure you don't accidentally hit F5 and
run the entire script. You don't need to run this:
*/
RAISERROR(N'Oops! No, don''t just hit F5. Run these demos one at a time.', 20, 1) WITH LOG;
GO
 
 
/* I'm using the 50GB medium Stack database: */
USE StackOverflow2013;
GO
/* And this stored procedure drops all nonclustered indexes: */
DropIndexes;
GO
/* It leaves clustered indexes in place though. */
 
 
SET STATISTICS IO ON;
 
/* Visualizing index contents: */
CREATE INDEX IX_LastAccessDate_Id
  ON dbo.Users(LastAccessDate, Id);
GO
/* Becomes: */
SELECT TOP 1000 LastAccessDate, Id
  FROM dbo.Users
  ORDER BY LastAccessDate, Id;
GO
 
 
EXEC DropIndexes;
GO
 
 
CREATE INDEX IX_LastAccessDate_Id_DisplayName_Age
  ON dbo.Users(LastAccessDate, Id, DisplayName, Age);
GO
/* Becomes: */
SELECT LastAccessDate, Id, DisplayName, Age
  FROM dbo.Users
  ORDER BY LastAccessDate, Id, DisplayName, Age;
GO
 
 
EXEC DropIndexes;
GO
 
 
 
CREATE INDEX IX_LastAccessDate_Id_Includes
  ON dbo.Users(LastAccessDate, Id)
  INCLUDE (DisplayName, Age);
GO
/* Becomes: */
SELECT LastAccessDate, Id, DisplayName, Age
  FROM dbo.Users
  ORDER BY LastAccessDate, Id  /* DisplayName, Age;  These aren't sorted */
GO
 
 
EXEC DropIndexes;
GO
 
 
/* Now you try: write a SELECT query to visualize each of these: */
 
CREATE INDEX IX_Reputation_Location_Includes
  ON dbo.Users(Reputation, Location)
  INCLUDE (DisplayName);
GO
 
 
CREATE INDEX IX_CreationDate_Views
  ON dbo.Users(CreationDate, Views)
  INCLUDE (DownVotes, UpVotes);
GO
 
 
CREATE INDEX IX_Age_Reputation_Location
  ON dbo.Users(Age, Reputation, Location);
GO
 
 
 
EXEC DropIndexes;
GO
 
 
 
/* Design an index for this: */
SELECT Id, DisplayName, Location
  FROM dbo.Users
  WHERE DisplayName = 'alex';
 
CREATE INDEX IX_DisplayName_Includes
  ON dbo.Users(DisplayName)
  INCLUDE (Location);
 
SELECT DisplayName, Location, Id
  FROM dbo.Users
  ORDER BY DisplayName;
 
SELECT Id, DisplayName, Location
  FROM dbo.Users
  WHERE DisplayName = 'alex';
 
 
/* Design an index for this: */
SELECT Id, DisplayName, Location
  FROM dbo.Users
  WHERE DisplayName = 'alex'
    AND Location = 'Seattle, WA';
 
/* But we already have this.... */
CREATE INDEX IX_DisplayName_Includes
  ON dbo.Users(DisplayName)
  INCLUDE (Location);
 
/* Visualize the index: */
SELECT DisplayName, Location
  FROM dbo.Users
  ORDER BY DisplayName;
 
/* Visualize the index contents: */
SELECT DisplayName, Location
  FROM dbo.Users
  WHERE DisplayName = 'alex'
  ORDER BY DisplayName;
 
/* Create a couple of index options: */
CREATE INDEX IX_DisplayName_Location
  ON dbo.Users(DisplayName, Location);
 
CREATE INDEX IX_Location_DisplayName
  ON dbo.Users(Location, DisplayName);
GO
 
/* Test 'em with index hints: */
SET STATISTICS IO ON;
GO
SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = 1) /* Clustered index scan */
  WHERE DisplayName = N'alex'
    AND Location = N'Seattle, WA';
 
SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = IX_DisplayName_Includes)
  WHERE DisplayName = N'alex'
    AND Location = N'Seattle, WA';
 
SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = IX_DisplayName_Location)
  WHERE DisplayName = N'alex'
    AND Location = N'Seattle, WA';
 
SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = IX_Location_DisplayName)
  WHERE DisplayName = N'alex'
    AND Location = N'Seattle, WA';
GO
 
/* Which one does SQL Server pick? */
SELECT Id, DisplayName, Location
  FROM dbo.Users
  WHERE DisplayName = N'alex'
    AND Location = N'Seattle, WA';
GO
 
 
 
SET STATISTICS IO ON;
GO
SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = 1) /* Clustered index scan */
  WHERE DisplayName = N'alex'
    AND Location <> N'Seattle, WA';
 
SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = IX_DisplayName_Includes)
  WHERE DisplayName = N'alex'
    AND Location <> N'Seattle, WA';
 
SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = IX_DisplayName_Location)
  WHERE DisplayName = N'alex'
    AND Location <> N'Seattle, WA';
 
SELECT Id, DisplayName, Location
  FROM dbo.Users WITH (INDEX = IX_Location_DisplayName)
  WHERE DisplayName = N'alex'
    AND Location <> N'Seattle, WA';
GO
 
/* Showing the total pages in each index: */
SELECT COUNT(*)
  FROM dbo.Users WITH (INDEX = 1) /* Clustered index scan */
 
SELECT COUNT(*)
  FROM dbo.Users WITH (INDEX = IX_DisplayName_Includes)
 
SELECT COUNT(*)
  FROM dbo.Users WITH (INDEX = IX_DisplayName_Location)
 
SELECT COUNT(*)
  FROM dbo.Users WITH (INDEX = IX_Location_DisplayName)
GO
 
/* Which one does SQL Server pick? */
SELECT Id, DisplayName, Location
  FROM dbo.Users
  WHERE DisplayName = N'alex'
    AND Location <> N'Seattle, WA';
GO